{"version":3,"sources":["tevin-trinh-392388.jpg","Home.js","Clock.js","Stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","id","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateClock","setState","date","Date","seconds","state","getSeconds","minutes","getMinutes","hours","getHours","bind","assertThisInitialized","_this2","timerID","setInterval","clearInterval","styleSeconds","position","top","width","height","transform","concat","transformOrigin","borderRadius","styleMinutes","styleHours","toLocaleTimeString","style","Component","Stopwatch","forEach","method","firstState","isRunning","millis","prevState","resetTimer","_this$state","pButton","onClick","startTimer","displayMinutes","App","HashRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8QCSzBC,eAPF,kBACTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,MAAIE,GAAG,cAAP,qBCyEGC,cAzEX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASVQ,YAAc,WACVP,EAAKQ,SAAS,CACVC,KAAM,IAAIC,KACVC,QAASX,EAAKY,MAAMH,KAAKI,aACzBC,QAASd,EAAKY,MAAMH,KAAKM,aACzBC,MAAOhB,EAAKY,MAAMH,KAAKQ,WAAa,MAbxCjB,EAAKY,MAAQ,CACTH,KAAM,IAAIC,KACVC,QAAS,GACTG,QAAS,GACTE,MAAO,IAEXhB,EAAKO,YAAcP,EAAKO,YAAYW,KAAjBjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KARLA,mFAkBC,IAAAoB,EAAAjB,KACfA,KAAKkB,QAAUC,YAAY,kBAAMF,EAAKb,eAAe,oDAGrDgB,cAAcpB,KAAKkB,0CAGnB,IAAIG,EAAe,CACfC,SAAS,WACTC,IAAI,MACJC,MAAM,MACNC,OAAO,MACPC,UAAS,UAAAC,OAAiC,EAArB3B,KAAKS,MAAMD,QAAc,GAArC,QACToB,gBAAiB,OAEjBC,aAAc,OAEdC,EAAe,CACfR,SAAS,WACTC,IAAI,MACJC,MAAM,MACNC,OAAO,MACPC,UAAS,UAAAC,OAAiC,EAArB3B,KAAKS,MAAME,QAAc,GAArC,QACTiB,gBAAiB,OAEjBC,aAAc,OAEdE,EAAa,CACbT,SAAS,WACTC,IAAI,MACJC,MAAM,MACNC,OAAO,MACPC,UAAS,UAAAC,OAA+B,GAAnB3B,KAAKS,MAAMI,MAAa,GAApC,QACTe,gBAAiB,OAEjBC,aAAc,OAGlB,GAAG7B,KAAKS,MAAMH,KACd,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,SAAgCO,KAAKS,MAAMH,KAAK0B,uBAEhD1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAewC,MAAOZ,IACrC/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAewC,MAAOH,IACrCxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAawC,MAAOF,cAnEvCG,aC4ELC,cA7EX,SAAAA,EAAYvC,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,GACdtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,IADQ,MAEA,CAAC,cAAe,aAAc,cACpCwC,QAAQ,SAACC,GACbxC,EAAKwC,GAAUxC,EAAKwC,GAAQtB,KAAbjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,OAEnBA,EAAKY,MAAQZ,EAAKyC,WAAa,CAC3BC,WAAW,EACX/B,QAAS,EACTG,QAAS,EACT6B,OAAQ,GAVE3C,4EAcdG,KAAKK,SAAS,SAAAoC,GAAS,MAAK,CACxBF,WAAYE,EAAUF,aAE1BvC,KAAKI,oDAGG,IAAAa,EAAAjB,KACTA,KAAKS,MAAM8B,UACVvC,KAAKkB,QAAUC,YAAY,WACvBF,EAAKZ,SAAS,SAAAoC,GAAS,MAAK,CACxBD,OAAQC,EAAUD,QAAU,KAG7BvB,EAAKR,MAAMD,QAAU,IACpBS,EAAKZ,SAAS,SAAAoC,GAAS,MAAI,CACvBjC,QAAS,EACTG,QAAS8B,EAAU9B,SAAW,KAGnCM,EAAKR,MAAM+B,OAAS,KACnBvB,EAAKZ,SAAS,SAAAoC,GAAS,MAAI,CACvBjC,QAASiC,EAAUjC,SAAW,EAC9BgC,OAAQ,MAGlB,IAEFpB,cAAcpB,KAAKkB,8CAIpBE,cAAcpB,KAAKkB,SACnBlB,KAAKK,SAASL,KAAKsC,2DAGtBtC,KAAK0C,8CAEG,IAAAC,EAC4C3C,KAAKS,MAA7C8B,EADJI,EACIJ,UAAW5B,EADfgC,EACehC,QAASH,EADxBmC,EACwBnC,QACxBoC,GAFAD,EACiCH,OACvBD,EAAYjD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASoD,QAAU7C,KAAK8C,YAA1C,SAAwExD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAUoD,QAAU7C,KAAK8C,YAA3C,UAC9FC,EAAiBpC,EAAU,EAAIrB,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,UAAKmB,EAAU,GAAK,IAAMA,EAAUA,IAAuBrB,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,iBAC1G,OACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACVH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZH,EAAAC,EAAAC,cAAA,YAAOuD,GACPzD,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,UAAKgB,EAAS,GAAK,IAAKA,EAAUA,GAAxC,KACAlB,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,UAAKQ,KAAKS,MAAM+B,OAAS,GAAK,IAAKxC,KAAKS,MAAM+B,OAASxC,KAAKS,MAAM+B,UAE1EI,EACDtD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASoD,QAAU7C,KAAK0C,YAA1C,kBAtEIR,aCkCTc,cA5Bb,SAAAA,EAAYpD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IAChBnD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,KAAMJ,KACDa,MAAQ,GAFGZ,wEAQhB,OACEP,EAAAC,EAAAC,cAACyD,EAAA,EAAD,KACE3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAMC,GAAG,KAAT,SACJ7D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAMC,GAAG,UAAT,UACJ7D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAMC,GAAG,cAAT,iBAIR7D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlE,IACjCC,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAW5D,IAChCL,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWpB,aAtB5BD,aCKEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec199418.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tevin-trinh-392388.d1bc26cb.jpg\";","import React from 'react';\n\nconst Home = () =>(\n    <div className=\"main-outline\">\n        <div className=\"main-bg\">\n            <h1 id=\"main-title\">Clocks</h1>\n        </div>\n    </div>\n)\nexport default Home;","import React, { Component } from 'react';\nimport Background from './tevin-trinh-392388.jpg';\n\n\nclass Clock extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            date: new Date(),\n            seconds: '',\n            minutes: '',\n            hours: ''\n        }\n        this.updateClock = this.updateClock.bind(this);\n    }\n    updateClock = () => {\n        this.setState({\n            date: new Date(),\n            seconds: this.state.date.getSeconds(),\n            minutes: this.state.date.getMinutes(),\n            hours: this.state.date.getHours() % 12\n        })\n    }\n    componentDidMount(){\n        this.timerID = setInterval(() => this.updateClock(), 1000)\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n      }\n    render(){\n        let styleSeconds = {\n            position:'absolute',\n            top:'50%',\n            width:'50%',\n            height:'6px',\n            transform: `rotate(${this.state.seconds * 6 + 95}deg)`,\n            transformOrigin: '100%',\n            // backgroundColor:'black',\n            borderRadius: '3px',\n          }\n        let styleMinutes = {\n            position:'absolute',\n            top:'50%',\n            width:'50%',\n            height:'6px',\n            transform: `rotate(${this.state.minutes * 6 + 90}deg)`,\n            transformOrigin: '100%',\n            // backgroundColor:'black',\n            borderRadius: '3px'\n          }\n        let styleHours = {\n            position:'absolute',\n            top:'50%',\n            width:'50%',\n            height:'6px',\n            transform: `rotate(${this.state.hours * 30 + 90}deg)`,\n            transformOrigin: '100%',\n            // backgroundColor:'black',\n            borderRadius: '3px'\n\n          }\n        if(this.state.date)\n        return(\n            <div className=\"clockcomponent\">\n                <div className=\"timeDisplay\">\n                <p className=\"localTime\">Time: {this.state.date.toLocaleTimeString()}</p>\n                </div>\n                <div className=\"clock\">\n                    <div className=\"clockFace\">\n                        <div className=\"hand seconds\" style={styleSeconds}></div> \n                        <div className=\"hand minutes\" style={styleMinutes}></div> \n                        <div className=\"hand hours\" style={styleHours}></div> \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Clock;","import React, { Component } from 'react';\n\nclass Stopwatch extends Component{\n    constructor(props){\n        super(props)\n        let m3thods = [\"updateClock\", \"startTimer\", \"resetTimer\" ]\n        m3thods.forEach((method) => {\n            this[method] = this[method].bind(this);\n        })\n        this.state = this.firstState = {\n            isRunning: true,\n            seconds: 0,\n            minutes: 0,\n            millis: 0,\n        }\n    }\n    startTimer(){\n        this.setState(prevState => ({\n            isRunning: !prevState.isRunning\n        }))\n        this.updateClock()\n    }\n\n   updateClock(){\n    if(this.state.isRunning){\n        this.timerID = setInterval(() => {\n            this.setState(prevState => ({\n                millis: prevState.millis += 1,\n                \n            }))\n            if(this.state.seconds > 59){\n                this.setState(prevState =>({\n                    seconds: 0,\n                    minutes: prevState.minutes += 1\n                }))\n            }\n            if(this.state.millis > 100){\n                this.setState(prevState =>({\n                    seconds: prevState.seconds += 1,\n                    millis: 0\n                }))\n            }\n        },10)\n    }else{\n        clearInterval(this.timerID)\n    }\n   } \n   resetTimer(){\n       clearInterval(this.timerID)\n       this.setState(this.firstState)\n   }\n   componentWillUnmount() {\n    this.resetTimer();\n  }\n    render(){\n        const { isRunning, minutes, seconds, millis } = this.state;\n        let pButton = isRunning ? <button className=\"button\" onClick={ this.startTimer }>Start</button> : <button className=\"button\"  onClick={ this.startTimer }>Pause</button>\n        let displayMinutes = minutes > 0 ? <span><h1>{minutes < 10 ? \"0\" + minutes : minutes}</h1></span> : <span><h1>00</h1></span>\n        return(\n            <div className=\"Stopwatch\">\n                <div className=\"innerFace\">\n                <ul className=\"timer-label\">\n                    <li>Mins</li>\n                    <li>Secs</li>\n                    <li>M/S</li>\n                </ul>\n                    <div className=\"timer\">\n                       <span>{displayMinutes}</span> \n                       <span><h1>{seconds< 10 ? \"0\"+ seconds : seconds}</h1>:</span>\n                       <span><h1>{this.state.millis < 10 ? \"0\"+ this.state.millis : this.state.millis}</h1></span>\n                    </div>\n                    {pButton}\n                    <button className=\"button\" onClick={ this.resetTimer }>Reset</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Stopwatch","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport Background from './tevin-trinh-392388.jpg';\nimport './App.css';\nimport Home from './Home';\nimport Clock from './Clock';\nimport Stopwatch from './Stopwatch';\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n\n  }\n\n  render() {\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"header\">\n            <ul>\n              <li><Link to=\"/\">Home</Link></li>\n              <li><Link to=\"/clock\">Clock</Link></li>\n              <li><Link to=\"/stopwatch\">Stop Watch</Link></li>\n            </ul>\n          </div>\n\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/clock\" component={Clock} />\n          <Route path=\"/stopwatch\" component={Stopwatch} />  \n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}